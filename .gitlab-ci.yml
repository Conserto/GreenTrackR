stages:
  - build
  - test

variables:
  SONAR_PROJECT_KEY: greentrackr-opensource
  SONAR_PROJECT_NAME: greentrackr-opensource
  SONAR_EXCLUSIONS: "**/extension/**, **/src/index.html"

cache:
  paths:
    - node_modules/

before_script:
  - apk add --no-cache yarn
  - yarn install --frozen-lockfile

build:
  stage: build
  script:
    - yarn build

build:source:
  stage: build
  image: node:21
  before_script:
    - yarn
  script:
    - yarn build
    - mv dist buildout
  cache:
    paths:
      - node_modules
    key:
      files:
        - package.json
  artifacts:
    name: "$CI_COMMIT_SHORT_SHA"
    paths:
      - buildout/
    expire_in: 1 hrs
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^(dev|master)$/ '
      when: on_success
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: never

test:
  stage: test
  script:
    - yarn test

check:
  stage: test
  script:
    - yarn check

# Analysis of source code
sonarqube:
  stage: test
  interruptible: true
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [ "" ]
  before_script: [ "" ]
  variables:
    GIT_DEPTH: 0
  script:
    - export P_VERSION=$(cat package.json | grep -m 1 "\"version\":" | cut -d':' -f2- | cut -d'"' -f2)
    - echo "Version => ${P_VERSION}"
    - |
      sonar-scanner \
        -Dsonar.lang.patterns.web="**/*.html" \
        -Dsonar.lang.patterns.htl="**/*.html" \
        -Dsonar.sources="./" \
        -Dsonar.exclusions="$SONAR_EXCLUSIONS" \
        -Dsonar.qualitygate.wait=true \
        -Dsonar.host.url="$SONAR_HOST" \
        -Dsonar.projectKey="${SONAR_PROJECT_KEY}" \
        -Dsonar.projectName="${SONAR_PROJECT_NAME}" \
        -Dsonar.projectVersion="${P_VERSION}" \
        -Dsonar.sourceEncoding="UTF-8" \
        -Dsonar.projectBaseDir="$(pwd)" \
        -Dsonar.token="$SONAR_TOKEN" \
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev"'
      when: on_success
    - when: never

